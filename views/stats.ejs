<!DOCTYPE html>
<html>
<head>
    <title>Statistiques - Support Tickets</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold">Statistiques des Tickets</h1>
            <div class="flex items-center gap-4">
                <a href="/" class="text-blue-500 hover:text-blue-700">&larr; Retour</a>
                <button onclick="openExportModal()" 
                        class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Exporter Excel
                </button>
            </div>
        </div>

        <!-- Sélecteur de période -->
        <div class="mb-8 flex gap-4">
            <button onclick="updatePeriod('day')" 
                    class="px-4 py-2 rounded transition-colors duration-200" 
                    id="btnDay">Par jour</button>
            <button onclick="updatePeriod('week')" 
                    class="px-4 py-2 rounded transition-colors duration-200" 
                    id="btnWeek">Par semaine</button>
            <button onclick="updatePeriod('month')" 
                    class="px-4 py-2 rounded transition-colors duration-200" 
                    id="btnMonth">Par mois</button>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <!-- Graphique principal -->
            <div class="bg-white p-6 rounded-lg shadow-md col-span-2">
                <h2 class="text-xl font-semibold mb-4">Évolution des tickets</h2>
                <div class="h-96">
                    <canvas id="mainChart"></canvas>
                </div>
            </div>

            <!-- Répartition GLPI vs Non-GLPI -->
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4">Répartition GLPI</h2>
                <div class="h-64">
                    <canvas id="glpiChart"></canvas>
                </div>
            </div>

            <!-- Top des appelants -->
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4">Top des appelants</h2>
                <div class="h-64">
                    <canvas id="callersChart"></canvas>
                </div>
            </div>

            <!-- Tags les plus utilisés -->
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4">Tags les plus utilisés</h2>
                <div class="h-64">
                    <canvas id="tagsChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Tableau récapitulatif -->
        <div class="mt-8 bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-semibold mb-4">Récapitulatif</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                <div class="p-4 bg-gray-50 rounded">
                    <div class="text-2xl font-bold text-blue-600" id="totalTickets">0</div>
                    <div class="text-gray-600">Total des tickets</div>
                </div>
                <div class="p-4 bg-gray-50 rounded">
                    <div class="text-2xl font-bold text-purple-600" id="totalGLPI">0</div>
                    <div class="text-gray-600">Tickets GLPI</div>
                </div>
                <div class="p-4 bg-gray-50 rounded">
                    <div class="text-2xl font-bold text-green-600" id="avgTicketsPerDay">0</div>
                    <div class="text-gray-600">Moyenne par jour</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal d'export -->
    <div id="exportModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden">
        <div class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-lg shadow-xl w-96">
            <h3 class="text-lg font-semibold mb-4">Configuration de l'export</h3>
            <form onsubmit="handleExport(event)" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium mb-1">Période</label>
                    <select id="exportPeriod" class="w-full p-2 border rounded">
                        <option value="day">Par jour</option>
                        <option value="week">Par semaine</option>
                        <option value="month">Par mois</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Inclure</label>
                    <div class="space-y-2">
                        <label class="flex items-center">
                            <input type="checkbox" class="mr-2" id="includeGLPI" checked>
                            Tickets GLPI
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" class="mr-2" id="includeTags" checked>
                            Tags
                        </label>
                        <label class="flex items-center">
                            <input type="checkbox" class="mr-2" id="includeCallers" checked>
                            Appelants
                        </label>
                    </div>
                </div>
                <div class="flex justify-end gap-2 mt-4">
                    <button type="button" onclick="closeExportModal()" 
                            class="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600">
                        Annuler
                    </button>
                    <button type="submit" 
                            class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600">
                        Exporter
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let mainChart, glpiChart, callersChart, tagsChart;
        let currentPeriod = 'day';
        const stats = <%- JSON.stringify(stats) %>;

        function updatePeriod(period) {
            currentPeriod = period;
            updateCharts();
            updateButtonStyles();
        }

        function updateButtonStyles() {
            ['day', 'week', 'month'].forEach(p => {
                const btn = document.getElementById(`btn${p.charAt(0).toUpperCase() + p.slice(1)}`);
                if (currentPeriod === p) {
                    btn.classList.add('bg-blue-500', 'text-white');
                } else {
                    btn.classList.remove('bg-blue-500', 'text-white');
                    btn.classList.add('bg-gray-200', 'hover:bg-gray-300');
                }
            });
        }

        function updateCharts() {
            const data = stats[currentPeriod];
            
            // Mise à jour du graphique principal
            if (mainChart) mainChart.destroy();
            mainChart = new Chart(document.getElementById('mainChart'), {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Tickets',
                        data: data.data,
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    }
                }
            });

            // Mise à jour des statistiques
            document.getElementById('totalTickets').textContent = data.total;
            document.getElementById('totalGLPI').textContent = data.glpi;
            document.getElementById('avgTicketsPerDay').textContent = 
                (data.total / data.data.length).toFixed(1);
        }

        function openExportModal() {
            document.getElementById('exportModal').classList.remove('hidden');
        }

        function closeExportModal() {
            document.getElementById('exportModal').classList.add('hidden');
        }

        function handleExport(event) {
            event.preventDefault();
            const period = document.getElementById('exportPeriod').value;
            const includeGLPI = document.getElementById('includeGLPI').checked;
            const includeTags = document.getElementById('includeTags').checked;
            const includeCallers = document.getElementById('includeCallers').checked;

            const queryParams = new URLSearchParams({
                period,
                includeGLPI,
                includeTags,
                includeCallers
            });

            window.location.href = `/api/stats/export?${queryParams}`;
            closeExportModal();
        }

        // Initialisation
        window.onload = function() {
            // Graphique GLPI
            glpiChart = new Chart(document.getElementById('glpiChart'), {
                type: 'doughnut',
                data: {
                    labels: ['GLPI', 'Non-GLPI'],
                    datasets: [{
                        data: [stats.glpiTotal, stats.nonGlpiTotal],
                        backgroundColor: [
                            'rgba(139, 92, 246, 0.8)',
                            'rgba(59, 130, 246, 0.8)'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Graphique des appelants
            callersChart = new Chart(document.getElementById('callersChart'), {
                type: 'bar',
                data: {
                    labels: stats.topCallers.map(c => c.name),
                    datasets: [{
                        data: stats.topCallers.map(c => c.count),
                        backgroundColor: 'rgba(16, 185, 129, 0.8)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    }
                }
            });

            // Graphique des tags
            tagsChart = new Chart(document.getElementById('tagsChart'), {
                type: 'bar',
                data: {
                    labels: stats.topTags.map(t => t.name),
                    datasets: [{
                        data: stats.topTags.map(t => t.count),
                        backgroundColor: 'rgba(124, 58, 237, 0.8)'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1
                            }
                        }
                    }
                }
            });

            updatePeriod('day');
        };
    </script>
</body>
</html>